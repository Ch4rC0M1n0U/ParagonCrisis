// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum MessageType {
  SYSTEM
  CHAT
  EVENT
}

enum CrisisSeverity {
  LOW
  MODERATE
  HIGH
  CRITICAL
}

enum EventSource {
  MANUAL
  SCHEDULER
  IMPORTED
}

enum UserRole {
  FORMATEUR
  UTILISATEUR
}

model Room {
  id            String         @id @default(cuid())
  code          String         @unique
  title         String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  participants  Participant[]
  messages      Message[]
  crisisEvents  CrisisEvent[]

  @@index([createdAt])
}

model Participant {
  id          String   @id @default(cuid())
  roomId      String
  displayName String
  role        String?  @default("participant")
  isConnected Boolean  @default(true)
  joinedAt    DateTime @default(now())
  leftAt      DateTime?

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([displayName])
}

model Message {
  id          String      @id @default(cuid())
  roomId      String
  authorName  String?
  type        MessageType
  content     String
  metadata    Json?
  createdAt   DateTime    @default(now()) @map("created_at")

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId, createdAt])
  @@index([type])
}

model CrisisEvent {
  id            String         @id @default(cuid())
  roomId        String
  title         String
  description   String
  severity      CrisisSeverity @default(MODERATE)
  source        EventSource    @default(MANUAL)
  scheduledFor  DateTime?
  triggeredAt   DateTime       @default(now())
  ackAt         DateTime?
  payload       Json?

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId, triggeredAt])
  @@index([severity])
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  firstName    String
  lastName     String
  service      String?
  matricule    String    @unique
  role         UserRole  @default(UTILISATEUR)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  sessions     Session[]

  @@index([lastName])
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}
